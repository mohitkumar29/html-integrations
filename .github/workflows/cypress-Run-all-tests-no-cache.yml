# This is a sample workflow for Cypress.
# It setups the environment and uses a cache for better performance on node and Cypress.
# This action is based on the Kitchen Sink project (https://github.com/cypress-io/cypress-example-kitchensink/)
# It can run tests by Browser and test file selection.


name: Run Cypress tests

on: 
  push:
  schedule:
    # runs at the minute 0 of the first hour of every monday
    - cron:  '0 1 * * 1'
      filters:
        branches:
          only:
            - master
            - stable
  workflow_dispatch:
    inputs:
      cyDashboard:
        description: Run the tests on Cypress Dashboard? Write "Yes" or "No".
        required: true
        default: "No"

jobs:

  setup-cypress:
    name: Setup and start the default app
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
    
      # 01. install a specific version of Node using
      # https://github.com/actions/setup-node
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      # 05. Install dependencies and verify Cypress
      - name: Install dependencies and verify Cypress
        env:
          # make sure every Cypress install prints minimal information
          CI: 1
        # print Cypress and OS info
        # This next command should use "npm ci" instead of "npm install"
        run: |
          npm ci
          npx cypress verify
          npx cypress info
          npx cypress version
          npx cypress version --component package
          npx cypress version --component binary
          npx cypress version --component electron
          npx cypress version --component node

  run-all-tests-matrix:
    runs-on: ubuntu-latest

    needs: setup-cypress

    strategy:
      fail-fast: true
      matrix:
        # Define values for browsers from
        browser: ["chrome"]
        # browser: ["chrome", "edge", "firefox", "chromium"]
        type: ["all"]
        # type: ["smoke","e2e", "ui", "validation"]
        # env: ["local", "public"]
    
    name: Run ${{ matrix.type }} tests on ${{ matrix.browser }}

    steps:
      - uses: actions/checkout@master

      - name: Checkout
        uses: actions/checkout@v2
    
      # install a specific version of Node using
      # https://github.com/actions/setup-node
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      # On push o r when we specify we don't want to send the tests to Dashboard through workflow dispatch
      # we set the environment variables dynamically to empty in order to avoid
      # recording the test execution to Cypress Dashboard.    
      # echo "CY_RECORD_KEY=" >> $GITHUB_ENV
          # echo "CY_RECORD_FLAG=" >> $GITHUB_ENV
      - name: Set Dashboard flags to empty when push or worflow_dispatch
        if: ${{ github.event_name == 'push' || github.event.inputs.cyDashboard == 'No' }}
        run: |
          echo "CY_RECORD_KEY=" >> $GITHUB_ENV
          echo "CY_RECORD_FLAG=" >> $GITHUB_ENV

      # We define the environment variables to send the test execution to the Cypress Dashboard
      # on every pull request or when specifying to record the tests on workflow dispatch
      - name: Set Dashboard flags when pull_request or worflow_dispatch
        if: ${{ github.event_name == 'pull_request' || github.event.inputs.cyDashboard == 'Yes' || github.event_name == 'schedule' }}
        run: |
          echo "CY_RECORD_KEY=${{ secrets.CYPRESS_RECORD_KEY }}" >> $GITHUB_ENV
          echo "CY_RECORD_FLAG=-- --record --key " >> $GITHUB_ENV
     
      - name: Run tests by browser
        uses: cypress-io/github-action@v2
        timeout-minutes: 10
        with:
          # 'build' starts the defauld demo 
          build: npm run build
          # 'test:ci' runs tests over Docker image for build context
          # we also send the Cypress Dashboard record key dynamically
          command: npm run test:ci ${{ env.CY_RECORD_FLAG }} ${{ env.CY_RECORD_KEY }}
          record: true
          parallel: true
          group: "${{ matrix.type }} tests on ${{ matrix.browser }}"
          browser: ${{ matrix.browser }}
          config: "video: true"
          spec: |
            cypress/tests/**/*.js
          # config: "\"video\": true, \"screenshotsFolder\": \"cypress/screenshots/${{ matrix.browser }}\", \"videosFolder\": \"cypress/videos/${{ matrix.browser }}\", \"video\": true"
          # spec: cypress/tests/${{ matrix.type }}/*.js
        env:
        # https://github.com/cypress-io/cypress-example-kitchensink/settings/secrets
        #     # screenshotsFolder: "cypress/screenshots/${{ matrix.browser }}"
        #     # videosFolder: "cypress/videos/${{ matrix.browser }}"
        #   TERM: xterm
          CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_PROJECT_ID }}
          GITHUB_TOKEN: ${{ secrets.GH_CICD_TOKEN }}

      # Save videos and screenshots as test artifacts
      # https://github.com/actions/upload-artifact
      - name: Upload screenshots
        uses: actions/upload-artifact@master
        # there might be no screenshots created when:
        # - there are no test failures
        # so only upload screenshots if previous step has failed
        if: failure()
        with:
          name: screenshots-${{ matrix.type }}-${{ matrix.browser }}
          path: cypress/screenshots
      # video should always be generated
      - name: Upload videos for all tests
        uses: actions/upload-artifact@master
        with:
          name: videos-${{ matrix.type }}-${{ matrix.browser }}
          path: cypress/videos
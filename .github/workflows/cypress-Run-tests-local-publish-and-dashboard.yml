# This is a workflow for Cypress testing.
# It sets up the environment.
# It runs tests by Browser, currently chrome, and test file selection, currently all project tests.
# Defines if the tests should run in a development (MathType packages code from the local repository) or production environment (published MathType packages code), depending on:
#   the users' choice, local for push and pull requests, and, public and local for scheduled workflows runs.
# It sends the tests to record on cypress dashboard if the user specifies it, or if it is a pull request or a scheduled workflow run.
# The tests run with a fail-fast strategy, once one fails, the others will not run.
# If a test fails, it creates a set of screenshots showing the errors.

name: Run Cypress tests

on: 
  push:
  pull_request:
    types: [ opened, reopened]
  schedule:
    # runs every Monday at 1 a.m
    - cron:  '0 1 * * 1'
      filters:
        branches:
          only:
            - stable
  workflow_dispatch:
    inputs:
      cyDashboard:
        description: Run the tests on Cypress Dashboard? Write 'Yes' or 'No'.
        required: true
        default: 'No'
      environment:
        # This input requires its parameters to be written in single quotes.
        # This is because the inputs will be used in a process that requires them to be single quotes instead of double ones.
        description: |
          List of where to take the package's code from:
          - 'local' to take the MathType packages code wih the local user changes.
          - 'public' to take the MathType packages code directly from npmjs page.
          * Note that if you write any different value, or use double quotes, the workflow will fail.
        required: true
        default: "['local']"

jobs:

  setup-cypress:
    name: Setup and start the default app
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
    
      # 01. Install a specific version of Node using
      # https://github.com/actions/setup-node
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      # 05. Install dependencies and verify Cypress
      - name: Install dependencies and verify Cypress
        env:
          # make sure every Cypress install prints minimal information
          CI: 1
        # print Cypress and OS info
        # This next command should use "npm ci" instead of "npm install"
        run: |
          npm ci
          npx cypress verify
          npx cypress info
          npx cypress version
          npx cypress version --component package
          npx cypress version --component binary
          npx cypress version --component electron
          npx cypress version --component node

  # This job will expose to the workflow a variable containing the data
  # of where to take the packages code from (local or public)
  # in order to use it as a part of the matrix strategy when running the tests
  define-env:
    runs-on: ubuntu-latest
    needs: setup-cypress

    name: Define run environment

    steps:

      # When the workflow runs through a push or a pull request, we want to test the local packages
      - name: Set local environment to run tests for push and pull request
        if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}
        run: |
          echo "TESTS_ENV=['local']" >> $GITHUB_ENV

      # When user runs manually the workflow, retrieve the setting that defines
      # where to take the package code from
      - name: Set the environment to run the tests defined by the user
        if: ${{ github.event.inputs.environment != '' }}
        run: |
          echo "TESTS_ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV

      # On schedule, keep sending data to Cypress Dashboard with the local packages, in the future will be with the public ones
      - name: Schedule the tests to run with published packages monthly
        if: ${{ github.event_name == 'schedule' }}
        run: |
          echo "TESTS_ENV=['local']" >> $GITHUB_ENV
      
      # Export the environment variable that contains the data from where to take the packages code
      # so that the job will be able to export it another job will be able to retrieve and use it
      - name: Export environment for test run
        id: export-matrix-env
        run: |
          echo "::set-output name=tests_env::${{env.TESTS_ENV}}"

    # Export the variable that specifies where to take the package's code from,
    # to be used in the matrix for the testing strategy.
    outputs:
      tests-env: ${{ steps.export-matrix-env.outputs.tests_env }}

  # Run project tests following a matrix strategy
  run-all-tests-matrix:
    runs-on: ubuntu-latest

    needs: define-env

    strategy:
      fail-fast: true
      matrix:
        # Define values for browsers from
        browser: ['chrome']
        # browser: ['chrome', 'edge', 'firefox', 'chromium']
        type: ['all']
        # type: ['smoke','e2e', 'ui', 'validation']
        env: ${{ fromJson(needs.define-env.outputs.tests-env) }} # where to take packages code from
        # env: ['local']
    
    name: Run ${{ matrix.type }} tests on ${{ matrix.browser }} with ${{ matrix.env }} packages

    steps:
      - uses: actions/checkout@master

      - name: Checkout
        uses: actions/checkout@v2
    
      # install a specific version of Node using
      # https://github.com/actions/setup-node
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16

      # On push or when we specify we don't want to send the tests to Dashboard through workflow dispatch
      # we set the environment variables dynamically to empty in order to avoid
      # recording the test execution to Cypress Dashboard.  
      - name: Set Dashboard flags to empty when push or worflow_dispatch
        if: ${{ github.event_name == 'push' || github.event.inputs.cyDashboard == 'No' }}
        run: |
          echo "CY_RECORD_KEY=" >> $GITHUB_ENV
          echo "CY_RECORD_FLAG=" >> $GITHUB_ENV

      # We define the environment variables to send the test execution to the Cypress Dashboard
      # on every pull request, scheduled run or when specifying to record the tests on workflow dispatch
      - name: Set Dashboard flags when pull_request, worflow_dispatch or schedule
        if: ${{ github.event_name == 'pull_request' || github.event.inputs.cyDashboard == 'Yes' || github.event_name == 'schedule' }}
        run: |
          echo "CY_RECORD_KEY=${{ secrets.CYPRESS_RECORD_KEY }}" >> $GITHUB_ENV
          echo "CY_RECORD_FLAG=-- --record --key " >> $GITHUB_ENV

      # When running tests in local, add demos to lerna.json file and
      # install lerna dependencies on the project root
      # It requires a step in order to ensure that the dependencies are properly installed
      # and does not give issues with lerna and cypress
      - name: Install dependencies for local packages
        if: ${{ matrix.env == 'local' }}
        run: |
          npm ci
          cp lerna.demos.json lerna.json
          npx lerna exec -- npm i
     
      # Runs the tests following the matrix strategy
      - name: Run tests by browser with ${{ matrix.env }} packages
        uses: cypress-io/github-action@v2
        timeout-minutes: 10
        with:
          # 'build' starts the default demo 
          # retrieve the env matrix variable to know if the test should run with local or public packages
          build: npm run build-generic-demo:${{ matrix.env }}
          # 'test:ci' runs tests over Docker image for build context
          # we also send the Cypress Dashboard record key dynamically
          command: npm run test:ci ${{ env.CY_RECORD_FLAG }} ${{ env.CY_RECORD_KEY }}
          record: true
          parallel: true
          group: "${{ matrix.type }} tests on ${{ matrix.browser }}"
          browser: ${{ matrix.browser }}
          config: "video: true"
          spec: |
            cypress/tests/**/*.js
        # config: "\"video\": true, \"screenshotsFolder\": \"cypress/screenshots/${{ matrix.browser }}\", \"videosFolder\": \"cypress/videos/${{ matrix.browser }}\", \"video\": true"
        # spec: cypress/tests/${{ matrix.type }}/*.js
        env:
        # https://github.com/cypress-io/cypress-example-kitchensink/settings/secrets
        #     screenshotsFolder: "cypress/screenshots/${{ matrix.browser }}"
        #     videosFolder: "cypress/videos/${{ matrix.browser }}"
        #   TERM: xterm
          CYPRESS_PROJECT_ID: ${{ secrets.CYPRESS_PROJECT_ID }}
          GITHUB_TOKEN: ${{ secrets.GH_CICD_TOKEN }}

      # Save videos and screenshots as test artifacts
      # https://github.com/actions/upload-artifact
      - name: Upload screenshots
        uses: actions/upload-artifact@master
        # there might be no screenshots created when:
        # - there are no test failures
        # so only upload screenshots if previous step has failed
        if: failure()
        with:
          name: screenshots-${{ matrix.type }}-${{ matrix.browser }}
          path: cypress/screenshots
      # video should always be generated
      - name: Upload videos for all tests
        uses: actions/upload-artifact@master
        with:
          name: videos-${{ matrix.type }}-${{ matrix.browser }}
          path: cypress/videos